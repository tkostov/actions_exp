env:
  code_coverage: 40 # required test coverage in %
  max_complexity: 'B' # max code complexity. A is the lowest and best, B is more relaxed etc

name: Test and Merge
on:
  pull_request:
    branches: ['main']

jobs:
  Build_Source_Branch:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements_dev.txt ]; then pip install -r requirements_dev.txt; fi

      - uses: pre-commit/action@v2.0.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Install xenon
        run: |
          pip install xenon
      - name: Perform xenon tests
        run: |
          xenon -b $max_complexity Project/src

      - name: Build wheel for testing
        run: |
          python3 -m pip install --upgrade build
          python3 -m build

      - name: Install wheel for testing
        run: |
          for f in dist/*.whl; do pip install ${f}; done

      - name: Test with pytest
        run: |
          pytest --cov-fail-under=$code_coverage -v

  Build_PR_Merge_Ref:
    needs: Build_Source_Branch
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        os: [ubuntu-latest]
    steps:

      - uses: actions/checkout@v3
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements_dev.txt ]; then pip install -r requirements_dev.txt; fi

      - uses: pre-commit/action@v2.0.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Install xenon
        run: |
          pip install xenon

      - name: Perform xenon tests
        run: |
          xenon -b $max_complexity Project/src

      - name: Build wheel for testing
        run: |
          python3 -m pip install --upgrade build
          python3 -m build

      - name: Install wheel for testing
        run: |
          for f in dist/*.whl; do pip install ${f}; done

      - name: Test with pytest
        run: |
          pytest --cov-fail-under=$code_coverage -v

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

      - uses: actions-ecosystem/action-bump-semver@v1
        id: bump-semver
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: minor

      - uses: actions-ecosystem/action-push-tag@v1
        with:
          tag: ${{ steps.bump-semver.outputs.new_version }}
          message: '${{ steps.bump-semver.outputs.new_version }}: PR #${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}'


# jobs:
#   build:
#     runs-on: ubuntu-latest
#     timeout-minutes: 10

#     services:
#       db_service:
#         image: postgres
#         env:
#           POSTGRES_USER: postgres
#           POSTGRES_DB: postgres
#           POSTGRES_PASSWORD: postgres
#         # Set health checks to wait until postgres has started
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           # Maps tcp port 5432 on service container to the host
#           - 5432:5432



#     steps:
#       - uses: actions/checkout@v2
#       - name: Install python version
#         uses: gabrielfalcao/pyenv-action@v7
#         with:
#           default: 3.8.6
#           command: pip install -U pip  # upgrade pip after installing python

#       - name: create environment
#         run: pyenv local 3.8.6 && python -mvenv .venv386

#       - name: Install dependencies
#         run: pip install -r requirements.txt --upgrade pip
#              pip install pylint
#       - name: Analysing the code with pylint
#         run: |
#           pylint `ls -R|grep .py$|xargs`

#       - name: setup pyenv
#         id: pyenv_installation
#         uses: "gabrielfalcao/pyenv-action@v7"

#       - name: debug pyenv
#         run: echo ${{ steps.pyenv_installation.outputs.pyenv_root }}
# view rawpostgres_pyenv_gh_action_config.yml hosted with ‚ù§ by GitHub
